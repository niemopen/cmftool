//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.05.07 at 03:04:07 PM EDT 
//


package org.mitre.niem.nmf;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for WhiteSpaceFacetCodeSimpleType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="WhiteSpaceFacetCodeSimpleType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="collapse"/&gt;
 *     &lt;enumeration value="preserve"/&gt;
 *     &lt;enumeration value="replace"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "WhiteSpaceFacetCodeSimpleType")
@XmlEnum
public enum WhiteSpaceFacetCodeSimpleType {


    /**
     * After the processing implied by replace, contiguous sequences of #x20's are collapsed to a single #x20, and leading and trailing #x20's are removed.
     * 
     */
    @XmlEnumValue("collapse")
    COLLAPSE("collapse"),

    /**
     * No normalization is done, the value is not changed (this is the behavior required by [XML 1.0 (Second Edition)] for element content)
     * 
     */
    @XmlEnumValue("preserve")
    PRESERVE("preserve"),

    /**
     * All occurrences of #x9 (tab), #xA (line feed) and #xD (carriage return) are replaced with #x20 (space)
     * 
     */
    @XmlEnumValue("replace")
    REPLACE("replace");
    private final String value;

    WhiteSpaceFacetCodeSimpleType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static WhiteSpaceFacetCodeSimpleType fromValue(String v) {
        for (WhiteSpaceFacetCodeSimpleType c: WhiteSpaceFacetCodeSimpleType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
